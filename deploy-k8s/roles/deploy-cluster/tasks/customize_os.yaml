# Stop and Disable Firewall service in all K8S cluster nodes
- name: Stop service firewalld, if started
  service:
    name: firewalld
    state: stopped
    enabled: no
  when: inventory_hostname in groups['kube_cluster']

# Stop and Disable SELinux on all K8S cluster nodes
- name: disable SELinux
  command: setenforce 0
  ignore_errors: true
  when: inventory_hostname in groups['kube_cluster']

- name: disable SELinux on reboot
  ansible.posix.selinux:
    state: disabled
  when: inventory_hostname in groups['kube_cluster']

# Disable swap on all K8S cluster nodes
- name: disable swap
  command: swapoff -a
  when: inventory_hostname in groups['kube_cluster']

# Remove swap entry from /etc/fstab from all K8S cluster nodes
- name: Remove swapfile from /etc/fstab
  mount:
    name: swap
    fstype: swap
    state: absent
  when: inventory_hostname in groups['kube_cluster']

# Install yum-utils
- name: Install yum-utils
  yum:
    name: yum-utils
    state: present
  when: inventory_hostname in groups['kube_cluster']

# Set up docker repository
- name: set up docker repository
  command: sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
  when: inventory_hostname in groups['kube_cluster']

# Install container.d on all K8S cluster nodes
- name: install container.d from docker repo
  yum:
    name: containerd.io
    state: present
  when: inventory_hostname in groups['kube_cluster']

- name: Activate containerd cri plugin
  lineinfile:
    path: /etc/containerd/config.toml
    search_string: 'disabled_plugins = ["cri"]'
    line: 'disabled_plugins = []'
  when: inventory_hostname in groups['kube_cluster']

- name: Configure the systemd cgroup driver
  lineinfile:
    path: /etc/containerd/config.toml
    insertafter: 'disabled_plugins = ["cri"]'
    line: "{{ item }}"
  loop:
    - '[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]'
    - '  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]'
    - '    SystemdCgroup = true'
  when: inventory_hostname in groups['kube_cluster']

# Start containerd service on all K8S cluster nodes
- name: start containerd
  service:
    name: containerd
    enabled: yes
    state: restarted
  when: inventory_hostname in groups['kube_cluster']

# Update all packages
- name: upgrade all packages
  yum:
    name: '*'
    state: latest
  when: inventory_hostname in groups['kube_cluster']

# Restart all VMs
- name: Rebooting VMs
  reboot:
  when: inventory_hostname in groups['kube_cluster']
